
==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\api\axios.js ====

import axios from "axios";

const api = axios.create({
  baseURL: "http://localhost:3001/api",
});

// Добавляем интерцептор для токена
api.interceptors.request.use((config) => {
  const token = localStorage.getItem("jwt_token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;

==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\App.vue ====

<script>
import { RouterLink, RouterView } from "vue-router";
import Home from "@/views/Home.vue";
import Header from "./components/Header.vue";
import Footer from "./components/Footer.vue";

export default {
    name: "app",
    components: { Header, Footer },
};
</script>

<template>
    <div id="app">
        <Header />

        <main>
            <RouterLink to="/"></RouterLink>
            <RouterView />
        </main>

        <Footer />
    </div>
</template>

<style>
html,
body,
#app {
    height: 100%;
    margin: 0;
    display: flex;
    flex-direction: column;
}
main {
    flex: 1 0 auto;
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\components\Diagramm.vue ====

<template>
  <div class="gantt-outer">
    <div class="gantt-scroll">
      <div class="gantt">
        <div class="gantt-header">
          <div class="name-cell"></div>
          <div v-for="day in allDates" :key="day" class="header-cell">
            {{ day }}
          </div>
        </div>
        <div v-for="team in teams" :key="team.name" class="gantt-row">
          <div class="name-cell">{{ team.name }}</div>
          <div class="row-content">
            <div
              v-for="task in team.tasks"
              :key="task.name"
              class="task"
              :style="getTaskStyle(task)"
            >
              {{ task.name }}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
function genDays(start, end) {
  const arr = [];
  let dt = new Date(start);
  end = new Date(end);
  while (dt <= end) {
    arr.push(dt.toISOString().slice(0, 10));
    dt.setDate(dt.getDate() + 1);
  }
  return arr;
}

export default {
  data() {
    return {
      rawTeams: [
        {
          name: "Команда 1",
          tasks: [
            {
              name: "проект x",
              start_date: "2025-05-31T08:36:55.435114",
              end_date: "2025-06-01T20:36:55.435114",
              color: "#f68926",
            },
          ],
        },
        {
          name: "Команда 2",
          tasks: [
            {
              name: "проект y",
              start_date: "2025-06-03",
              end_date: "2025-06-04",
              color: "#b85fa5",
            },
          ],
        },
      ],
    };
  },
  computed: {
    allDates() {
      // Собираем все start_date и end_date
      const dates = this.rawTeams.flatMap((team) =>
        team.tasks.flatMap((task) => [
          task.start_date.slice(0, 10),
          task.end_date.slice(0, 10),
        ])
      );
      // Выбираем min и max
      const min = dates.reduce((a, b) => (a < b ? a : b));
      const max = dates.reduce((a, b) => (a > b ? a : b));
      return genDays(min, max);
    },
    teams() {
      return this.rawTeams.map((team) => ({
        name: team.name,
        tasks: team.tasks
          .map((task) => {
            const formatDate = (d) => d.slice(0, 10);
            const start = this.allDates.indexOf(formatDate(task.start_date));
            const end = this.allDates.indexOf(formatDate(task.end_date));
            if (start === -1 || end === -1) return null;
            return {
              ...task,
              start,
              duration: end - start + 1,
            };
          })
          .filter(Boolean),
      }));
    },
  },
  methods: {
    getTaskStyle(task) {
      return {
        left: `calc(${task.start} * 140px)`,
        width: `calc(${task.duration} * 140px)`,
        background: task.color,
      };
    },
  },
};
</script>

<!-- стиль как у тебя, исправлений не требует -->
<style scoped>
.gantt-outer {
  background: #2b2d32;
  height: max-content;
  box-sizing: border-box;
  width: 100%;
  margin: 40px auto;
}

.gantt-scroll {
  overflow-x: auto;
  background: #43464d;
  border-radius: 18px;
  padding: 8px 0;
}

.gantt {
  min-width: 700px;
  min-width: fit-content;
}
.gantt-header {
  display: flex;
  border-bottom: 2px solid #ccc;
  color: white;
}
.gantt-row {
  display: flex;
  border-bottom: 1px solid #86878e;
  align-items: center;
  height: 48px;
}
.name-cell {
  width: 150px;
  min-width: 150px;
  padding: 8px;
  font-size: 18px;
  background: transparent;
  border-right: 1px solid #86878e;
  display: flex;
  align-items: center;
  color: white;
}
.header-cell {
  width: 140px;
  min-width: 140px;
  text-align: center;
  padding: 4px 0;
  border-right: 1px solid #86878e;
  font-weight: 600;
}
.row-content {
  position: relative;
  flex: 1;
  min-width: 0;
  height: 100%;
}
.task {
  position: absolute;
  top: 8px;
  height: 32px;
  border-radius: 4px;
  color: #fff;
  padding: 0 14px;
  display: flex;
  align-items: center;
  font-size: 16px;
  font-weight: 500;
  z-index: 1;
  white-space: nowrap;
  box-sizing: border-box;
}
.gantt-scroll::-webkit-scrollbar {
  height: 8px;
  background: #393b40;
  border-radius: 8px;
}
.gantt-scroll::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 8px;
}
.gantt-scroll::-webkit-scrollbar-thumb:hover {
  background: #b2b2b2;
}
.gantt-scroll {
  scrollbar-color: #888 #393b40;
  scrollbar-width: thin;
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\components\Footer.vue ====

<template>
    <footer>Copyright @ 2025 Байтики corp.</footer>
</template>

<script>
export default {
    name: "footer",
};
</script>

<style>
footer {
    text-align: center;
    color: #979797;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-top: 1px solid #969595;
    height: 4.25rem;
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\components\Header.vue ====

<template>
  <header>
    <div @click="toHome" class="logo">
      <h1>Байтики</h1>
      <img src="../assets/header/Blogo.svg" alt="logo" />
    </div>
    <div class="user" v-if="loginCheck">
      <img src="../assets/header/проекты.svg" alt="projects" />
      <span class="username" v-if="userName">{{ userName }}</span>
      <img src="../assets/header/профиль.svg" @click="toProfile" alt="user" />
    </div>
    <div class="user" v-else>
      <img src="../assets/header/профиль.svg" @click="toProfile" alt="user" />
    </div>
  </header>
</template>

<script>
import { jwtDecode } from "jwt-decode";
export default {
  name: "header",
  data() {
    return {
      loginCheck: false,
      userName: "",
    };
  },
  mounted() {
    this.refreshUser();
    window.addEventListener('storage', this.refreshUser);
  },
  beforeUnmount() {
    window.removeEventListener('storage', this.refreshUser);
  },
  methods: {
  toProfile() { this.$router.push("/user"); },
  toHome() { this.$router.push("/"); },
  refreshUser() {
    const token = localStorage.getItem("jwt_token");
    this.loginCheck = !!token;
    if (token) {
      try {
        const decoded = jwtDecode(token);
        this.userName = decoded.username || decoded.name || decoded.email || '';
      } catch { this.userName = ""; }
    } else {
      this.userName = "";
    }
  }
}
};
</script>

<style>
.username {
  color: #fafafc;
  font-size: 1.2rem;
  font-weight: 600;
  margin: 0 5px;
}
header {
  display: flex;
  flex-direction: row;
  border-bottom: 1px solid #969595;
  height: 5rem;
  padding: 0 90px;
  align-items: center;
  justify-content: space-between;
}
.logo img {
  height: 2rem;
  width: 2rem;
  display: block;
}
.logo {
  display: flex;
  align-items: baseline;
  color: white;
  gap: 0.8rem;
  cursor: pointer;
  transition: transform 0.5s ease;
}
.logo:hover {
  transform: scale(1.1);
}
h1 {
  font-weight: bold;
  font-size: 30px;
}
.user {
  display: flex;
  align-items: center;
  gap: 24px;
}
.user img {
  height: 2rem;
  width: 2rem;
  display: block;
  transition: transform 0.5s ease;
}
.user img:hover {
  transform: scale(1.3);
  cursor: pointer;
}
</style>

==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\main.js ====

import './assets/main.css'

import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

const app = createApp(App)

app.use(router)

app.mount('#app')


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\router\index.js ====

import { createRouter, createWebHistory } from "vue-router";
import Home from "@/views/Home.vue";
import Register from "@/views/Register.vue";
import Login from "@/views/Login.vue";
import User from "@/views/User.vue";
import OrderForm from "@/views/OrderForm.vue";

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: "/",
      name: "home",
      component: Home,
    },
    {
      path: "/register",
      name: "register",
      component: Register,
    },
    {
      path: "/login",
      name: "login",
      component: Login,
    },
    {
      path: "/user",
      name: "user",
      component: User,
    },
    {
      path: "/order",
      name: "order",
      component: OrderForm,
    },
  ],
});

export default router;


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\views\Home.vue ====

<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const isVisible = ref(false)

// Проверяем авторизацию: есть ли токен
const isAuth = ref(localStorage.getItem('jwt_token') !== null)

function toRegister() {
  router.push('/register')
}
function toLogin() {
  router.push('/login')
}
function toCabinet() {
  router.push('/user')
}

window.addEventListener('storage', () => {
  isAuth.value = localStorage.getItem('jwt_token') !== null
})

onMounted(() => {
  const el = document.querySelector('.discription')
  if (!el) return
  const observer = new IntersectionObserver(
    ([entry]) => {
      if (entry.isIntersecting) {
        isVisible.value = true
        observer.unobserve(el)
      }
    },
    { threshold: 0.1 }
  )
  observer.observe(el)
})
</script>

<template>
  <div class="home">
    <section class="section-1">
      <div class="main-font">
        <h1>
          Мы реализуем ваши <br />
          проекты
        </h1>
        <p>Легко, быстро, без проблем</p>
      </div>
      <button v-if="!isAuth" @click="toLogin">Войти</button>
      <button v-else @click="toCabinet">Перейти в личный кабинет</button>
    </section>
    <section class="section-2">
      <div class="discription">
        <div
          class="disc-text"
          :class="{ 'fade-in': true, visible: isVisible }"
        >
          <h1>Скорость</h1>
          <p>
            У нас большой штат сотрудников, разделённый на множество команд. Поэтому работа будет идти быстро
          </p>
        </div>
        <div
          class="disc-text"
          :class="{ 'fade-in': true, visible: isVisible }"
        >
          <h1>Качество</h1>
          <p>
            Наши специалисты обладают огромным опытом, что способствует качественной работе
          </p>
        </div>
        <div
          class="disc-text"
          :class="{ 'fade-in': true, visible: isVisible }"
        >
          <h1>Цена-качество</h1>
          <p>
            Наша организация, гаранитирует вам качественный продукт за соответствующую цену
          </p>
        </div>
      </div>
      <div
        v-if="!isAuth"
        class="register"
        :class="{ 'fade-in': true, visible: isVisible }"
      >
        <h1>
          Зарегистрируйтесь, чтобы иметь доступ ко всем <br />
          функциям
        </h1>
        <button @click="toRegister">Зарегистрироваться</button>
      </div>
    </section>
  </div>
</template>

<style scoped>
.home {
    display: flex;
    flex-direction: column;
    gap: 14.75rem;
    margin: 90px 90px;
}
.section-1 {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    gap: 100px;
}
.main-font h1 {
    background: linear-gradient(to right, #ffffff, #548dff);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: bold;
    font-size: 5rem;
}
.main-font p {
    color: #979797;
    font-size: 2.5rem;
}
.section-1 button {
    border-radius: 50px;
    background: #548dff;
    border: none;
    color: #ffffff;
    width: 30.625rem;
    height: 6.5rem;
    font-size: 40px;
    transition: transform 0.5s ease;
}
.section-1 button:hover {
    background: #497bdf;
    cursor: pointer;
    transform: scale(1.1);
}
.section-2 {
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    gap: 9.25rem;
}
.discription {
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-direction: row;
    align-items: center;
}
.disc-text {
    width: 20.125rem;
    height: 17.5rem;
    opacity: 0;
}
.fade-in {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
}
.fade-in.visible {
    opacity: 2;
    transform: translateY(0);
}
.disc-text h1 {
    color: #ffffff;
    font-size: 30px;
    font-weight: bold;
}
.disc-text p {
    color: #979797;
    font-size: 30px;
    white-space: normal;
    word-wrap: break-word;
}
.register {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    gap: 20px;
}
.register h1 {
    font-size: 40px;
    font-weight: bold;
    color: #ffffff;
}
.register button {
    width: 43.75rem;
    height: 7.5rem;
    background: #548dff;
    color: white;
    border: none;
    border-radius: 50px;
    font-size: 50px;
    transition: transform 0.5s ease;
}
.register button:hover {
    background: #497bdf;
    cursor: pointer;
    transform: scale(1.1);
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\views\Login.vue ====

<script>
import api from "@/api/axios";

export default {
  name: "login",
  data() {
    return {
      username: "",
      password: "",
      error: "",
    };
  },
  methods: {
    async onSubmit(e) {
      e.preventDefault();
      this.error = "";
      try {
        const res = await api.post("/auth/login", {
          username: this.username,
          password: this.password,
        });
        localStorage.setItem("jwt_token", res.data.token);
        window.dispatchEvent(new Event('storage'));
        this.$router.push("/user");
      } catch (err) {
        this.error =
          err.response?.data?.message ||
          "Ошибка входа или соединения с сервером";
      }
    },
  },
};


</script>

<template>
  <div class="formBox">
    <form @submit="onSubmit">
      <h1>Вход</h1>
      <div class="field">
        <label>Имя пользователя</label>
        <input type="text" required v-model="username" />
      </div>
      <div class="field">
        <label>Пароль</label>
        <input type="password" required v-model="password" />
      </div>
      <div v-if="error" style="color: red;">{{ error }}</div>
      <button type="submit">Войти</button>
    </form>
  </div>
</template>


<style scoped>
form {
  display: flex;
  flex-direction: column;
  min-width: 300px;
  max-width: 22%;
  margin: 30px auto;
  background: #42464e;
  text-align: left;
  padding: 30px;
  border-radius: 20px;
  gap: 25px;
}
h1 {
  text-align: center;
  color: #ffffff;
  font-size: 40px;
  font-weight: bold;
}
label {
  color: #979797;
  display: inline-block;
  font-size: 1rem;
  letter-spacing: 1px;
}
input {
  background: #42464e;
  border: 1.5px solid #bbbbbb;
  border-radius: 12px;
  height: 36px;
  color: white;
  font-size: 1.2rem;
  padding: 4px 12px;
}
.field {
  display: flex;
  flex-direction: column;
  gap: 5px;
}
button {
  align-self: center;
  text-align: center;
  width: 75%;
  height: 15%;
  background: #548dff;
  color: white;
  border: none;
  border-radius: 50px;
  font-size: 25px;
  transition: transform 0.5s ease;
  padding: 20px;
  margin-top: 6.25rem;
}
button:hover {
  background: #497bdf;
  cursor: pointer;
  transform: scale(1.1);
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\views\OrderForm.vue ====

<template>
  <form>
    <h1>Заявка на создание проекта</h1>

    <label>Выберите тип проекта </label>
    <select v-model="selected1" required>
      <option
        v-for="item in dropdownProjectType"
        :key="item.value"
        :value="item.value"
      >
        {{ item }}
      </option>
    </select>
    <label>Опишите, что должен уметь ваш проект</label>
    <textarea name="" id=""></textarea>

    <h1>Технологический стек</h1>

    <label>Выберите backend</label>
    <select v-model="selected2" required>
      <option
        v-for="item in dropdawnBackend"
        :key="item.value"
        :value="item.value"
      >
        {{ item }}
      </option>
    </select>
    <label>Выберите базу данных</label>
    <select v-model="selected3" required>
      <option v-for="item in dropdawnDB" :key="item.value" :value="item.value">
        {{ item }}
      </option>
    </select>
    <label>Выберите frontend</label>
    <select v-model="selected4" required>
      <option
        v-for="item in dropdawnFrontEnd"
        :key="item.value"
        :value="item.value"
      >
        {{ item }}
      </option>
    </select>

    <div id="checkbox">
      <input type="checkbox" name="" id="" />
      <p>Я не знаю. Выберите всё за меня</p>
    </div>

    <div class="double-label">
      <h1>Когда вам нужен готовый проект?</h1>
      <p>(можете написать дату или промежуток времени)</p>
    </div>
    <input type="text" />
    <div class="double-label">
      <h1>Если есть что-то, что важно для вашего проекта, опишите здесь</h1>
      <p>(например, интеграция с платежной системой)</p>
    </div>
    <input type="text" />
    <div class="double-label">
      <h1>Укажите контактные данные</h1>
      <p>(если не указано, связь будет осуществляться по почте)</p>
    </div>
    <input type="text" />

    <button>Рассчитать</button>
  </form>
</template>

<script>
export default {
  name: "order",
  data() {
    return {
      dropdownProjectType: [
        "Сайт",
        "Одностраничный сайт (лендинг)",
        "Мобильное приложение",
        "Интернет-магазин",
        "Внутренний корпоративный портал",
        "Панель администратора",
        "Искусственный интеллект ",
        "API (сервис для взаимодействия)",
        "Доработка  существующего продукта",
        "Верстка",
        "Чат-бот",
        "Парсер",
        "Игра",
      ],
      dropdawnBackend: [
        "Php (рекомендуется)",
        "Python",
        "Node.js",
        "Java",
        "Go",
        "Ruby",
        "Kotlin",
        "Rust",
        "C#",
        "Без бекенда",
      ],
      dropdawnDB: ["SQL", "Firebase", "MongoDB", "Redis", "Без базы данных"],
      dropdawnFrontEnd: [
        "Html + css + javaScript",
        "Vue",
        "React",
        "Swift",
        "Java",
        "Kotlin",
        "Flatter",
      ],

      selected1: "a",
      selected2: "a",
      selected3: "a",
      selected4: "a",
    };
  },
};
</script>

<style scoped>
form {
  display: flex;
  flex-direction: column;
  margin: 30px auto;
  width: 60%;
  background: #42464e;
  text-align: left;
  padding: 30px;
  border-radius: 20px;
  gap: 20px;
}
h1 {
  color: white;
  font-weight: bold;
  text-align: center;
  font-size: 30px;
}
.double-label h1 {
  color: white;
  font-weight: normal;
  text-align: left;
  font-size: 20px;
}
.double-label p {
  color: #ffffff;
  font-size: 15px;
}
label {
  color: #ffffff;
  font-size: 20px;
}
input {
  background: #42464e;
  border: 1.5px solid #bbbbbb;
  border-radius: 12px;
  height: 36px;
  color: white;
  font-size: 1.2rem;
  padding: 4px 12px;
}
select {
  background: #42464e;
  border: 1.5px solid #bbbbbb;
  border-radius: 12px;
  height: 36px;
  color: white;
  font-size: 1.2rem;
  padding: 0 12px;
}
#checkbox {
  display: flex;
  align-items: center;
  color: #ffffff;
  gap: 5px;
  font-size: 15px;
}
button {
  align-self: center;
  text-align: center;
  width: 50%;
  height: 15%;
  background: #548dff;
  color: white;
  border: none;
  border-radius: 50px;
  font-size: 25px;
  transition: transform 0.5s ease;
  padding: 20px;
  margin: 2.25rem;
}
button:hover {
  background: #497bdf;
  cursor: pointer;
  transform: scale(1.1);
}
option {
  color: #bbbbbb;
}
textarea {
  background: #42464e;
  border: 1.5px solid #bbbbbb;
  border-radius: 12px;
  height: 6.25rem;
  color: white;
  font-size: 1.2rem;
  padding: 8px 12px;
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\views\Register.vue ====

<script>
import api from "@/api/axios";

export default {
  name: "register",
  data() {
    return {
      username: "",
      email: "",
      company_name: "",
      password: "",
      password2: "",
      error: "",
      message: "",
    };
  },
  methods: {
    async onSubmit(e) {
      e.preventDefault();
      if (this.password !== this.password2) {
        this.error = "Пароли не совпадают";
        return;
      }
      this.error = "";
      try {
        await api.post("/auth/register", {
          username: this.username,
          email: this.email,
          company_name: this.company_name,
          password: this.password,
        });
        this.message = "Успешно! Теперь войдите.";
      } catch (err) {
        this.error =
          err.response?.data?.message ||
          "Ошибка регистрации или соединения с сервером";
      }
    },
  },
};
</script>
<template>
  <div class="formBox">
    <form @submit="onSubmit">
      <!-- поля ввода, как раньше -->
      <div class="field">
        <label>Имя пользователя</label>
        <input type="text" required v-model="username" />
      </div>
      <div class="field">
        <label>Email</label>
        <input type="text" required v-model="email" />
      </div>
      <div class="field">
        <label>Название организации</label>
        <input type="text" v-model="company_name" />
      </div>
      <div class="field">
        <label>Пароль</label>
        <input type="password" required v-model="password" />
      </div>
      <div class="field">
        <label>Подтвердить пароль</label>
        <input type="password" required v-model="password2" />
      </div>
      <div v-if="error" style="color:red;">{{ error }}</div>
      <div v-if="message" style="color:green;">{{ message }}</div>
      <button type="submit">Зарегистрироваться</button>
    </form>
  </div>
</template>



<style scoped>
form {
  display: flex;
  flex-direction: column;
  min-width: 300px;
  max-width: 22%;
  margin: 30px auto;
  background: #42464e;
  text-align: left;
  padding: 30px;
  border-radius: 20px;
  gap: 25px;
}
h1 {
  text-align: center;
  color: #ffffff;
  font-size: 40px;
  font-weight: bold;
}
label {
  color: #979797;
  display: inline-block;
  font-size: 1rem;
  letter-spacing: 1px;
}
input {
  background: #42464e;
  border: 1.5px solid #bbbbbb;
  border-radius: 12px;
  height: 36px;
  color: white;
  font-size: 1.2rem;
  padding: 4px 12px;
}
.field {
  display: flex;
  flex-direction: column;
  gap: 5px;
}
button {
  align-self: center;
  text-align: center;
  width: 75%;
  height: 15%;
  background: #548dff;
  color: white;
  border: none;
  border-radius: 50px;
  font-size: 20px;
  transition: transform 0.5s ease;
  padding: 20px;
  margin-top: 10px;
}
button:hover {
  background: #497bdf;
  cursor: pointer;
  transform: scale(1.1);
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\src\views\User.vue ====

<template>
  <div class="user-data-block">
    <div class="user-info" v-if="userInfo">
      <h1>Имя пользователя: {{ userInfo.username }}</h1>
      <h1>Email: {{ userInfo.email }}</h1>
    </div>
    <div v-else style="color: red;">{{ error }}</div>

    <div class="admin-panel" v-if="userInfo && isManager">
      <button>Посмотреть заявки</button>
      <button>Список команд</button>
      <button>Список разработчиков</button>
    </div>
    <Diagramm v-if="userInfo" />
  </div>

  <button @click="toOrderForm" v-if="userInfo">Сделать заказ</button>
  <button @click="logout" v-if="userInfo">Выйти</button>
</template>

<script>
import Diagramm from "@/components/Diagramm.vue";
import api from "@/api/axios";

export default {
  name: "User",
  components: { Diagramm },
  data() {
    return {
      userInfo: null,
      error: ""
    };
  },
  computed: {
    isManager() {
      // Типичная структура полей с ролью: user.role === 'manager'
      return this.userInfo && this.userInfo.role === 'manager';
    }
  },
  methods: {
    toOrderForm() {
      this.$router.push("/order");
    },
    logout() {
      // Удаляем токен и редиректим на /login
      localStorage.removeItem('jwt_token');
      window.dispatchEvent(new Event('storage'));
      this.$router.push('/login');
    }
  },
  async mounted() {
    try {
      const res = await api.get("/user/protected"); // предполагается, что этот роут возвращает { user: { username, email, ... } }
      this.userInfo = res.data.user;
    } catch (err) {
      if (err.response && err.response.status === 401) {
        localStorage.removeItem("jwt_token");
        this.$router.push("/login");
      } else {
        this.error = "Ошибка получения данных пользователя";
      }
    }
  }
};
</script>



<style scoped>
.user-info {
  background: #42464e;
  border-radius: 20px;
  padding: 20px;
  color: white;
  margin-bottom: 20px;
  width: 100%;
}
.user-data-block {
  margin: 40px auto;
  display: flex;
  flex-direction: column;
  width: 80%;
}
h1 {
  color: white;
  text-align: center;
}
button {
  display: block;
  margin: 40px auto;
  width: 28%;
  height: 5.625rem;
  background: #548dff;
  color: white;
  border: none;
  border-radius: 50px;
  font-size: 25px;
  transition: transform 0.5s ease;
  padding: 20px;
  margin-top: 6.25rem;
}
button:hover {
  background: #497bdf;
  cursor: pointer;
  transform: scale(1.1);
}
.admin-panel {
  display: flex;
  justify-content: flex-start;
  width: 100%;
}
.admin-panel button {
  width: max-content;
  min-width: 120px;
  height: 3.5rem;
  margin: 0 20px 0 0; /* или просто margin: 0 20px 0 0; */
  padding: 10px 25px;
}
.admin-panel button:last-child {
  margin-right: 0;
}
</style>


==== Файл: C:\Users\admin\Documents\GitHub\hakaton2025\frontend\vite.config.js ====

import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
// import vueDevTools from 'vite-plugin-vue-devtools'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    // vueDevTools(),
  ],
  server: {
    port: 3000
  },
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    },
  },
})
